@page "/prescription/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="card-title">Prescription</h3>
<br />
<a href="/prescription/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Add New Prescriptions
</a>
<br />
<br />

@if (Prescriptions == null)
{
    <div class="alert alert-info">Loading Prescriptions...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Name</th>
                <th>Quantity</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var Prescription in Prescriptions)
            {
                <tr>
                    <td>@Prescription.Name</td>
                    <td>
                        <a href="/makes/view/@Prescription.Name" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/makes/edit/@Prescription.Name" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(Prescription.Name))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Prescription> Prescriptions;

    protected async override Task OnInitializedAsync()
    {
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionEndpoint}");
    }

    async Task Delete(string prescriptionName)
    {
        var prescription = Prescriptions.First(q => q.Name == prescriptionName);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {prescription.Id}?");
        if (confirm)

        {
            await _client.DeleteAsync($"{Endpoints.PrescriptionEndpoint}/{prescriptionName}");
            await OnInitializedAsync();
        }
    }
}